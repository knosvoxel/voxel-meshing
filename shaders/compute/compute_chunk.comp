#version 460 core

struct VoxelData{
    vec3 pos;
    uint data;
};

struct Vertex{
    vec3 position;
    uint color_index;
    vec3 normal; // padded to 16 bit
    //uint padding;
};

struct DrawArraysIndirectCommand{
    uint count;
    uint instanceCount;
    uint first;
    uint baseInstance;
};

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0, std430) readonly buffer ssbo {
    VoxelData voxels[];
};

layout (binding = 1, std430) writeonly buffer final_vertices {
    Vertex vertices[];
};

layout (binding = 2, std430) buffer indirect_buffer {
    DrawArraysIndirectCommand indirect_command;
};

void main() {
    uint voxelIndex = gl_GlobalInvocationID.x;
    VoxelData voxel_data = voxels[voxelIndex];
    uint col_idx = uint(voxel_data.data >> 8); // third byte in data is the color index
    uint neighbours = uint(voxel_data.data & 255); // last byte in data are the neighbourhood relations
    vec3 voxel_pos = vec3(voxel_data.pos);

    uint verices_to_add = 0;

    if (((neighbours >> 7) & 1) == 1) verices_to_add += 6;
    if (((neighbours >> 6) & 1) == 1) verices_to_add += 6;
    if (((neighbours >> 5) & 1) == 1) verices_to_add += 6;
    if (((neighbours >> 4) & 1) == 1) verices_to_add += 6;
    if (((neighbours >> 3) & 1) == 1) verices_to_add += 6;
    if (((neighbours >> 2) & 1) == 1) verices_to_add += 6;

    uint local_base_idx = atomicAdd(indirect_command.count, verices_to_add);

    // x -> z -> y
    if (((neighbours >> 7) & 1) == 1){
        vec3 normal_1 = vec3(-1.0, 0.0, 0.0);
        Vertex v1, v2, v3, v4, v5, v6;
        v1.position = voxel_pos + vec3(0.0, 1.0, 1.0);
        v1.normal = normal_1;
        v1.color_index = col_idx;
        v2.position = voxel_pos;
        v2.normal = normal_1;
        v2.color_index = col_idx;
        v3.position = voxel_pos + vec3(0.0, 1.0, 0.0);
        v3.normal = normal_1;
        v3.color_index = col_idx;

        v4.position = voxel_pos;    
        v4.normal = normal_1;
        v4.color_index = col_idx;
        v5.position = voxel_pos + vec3(0.0, 1.0, 1.0); 
        v5.normal = normal_1;
        v5.color_index = col_idx;
        v6.position = voxel_pos + vec3(0.0, 0.0, 1.0);
        v6.normal = normal_1;
        v6.color_index = col_idx;

        vertices[local_base_idx] = v1;
        vertices[local_base_idx + 1] = v2;
        vertices[local_base_idx + 2] = v3;
        vertices[local_base_idx + 3] = v4;
        vertices[local_base_idx + 4] = v5;
        vertices[local_base_idx + 5] = v6;

        local_base_idx += 6;
    }

    if (((neighbours >> 6) & 1) == 1){
        vec3 normal_2 = vec3(1.0, 0.0, 0.0);
        Vertex v7, v8, v9, v10, v11, v12;
        v7.position = voxel_pos + vec3(1.0, 1.0, 1.0);
        v7.normal = normal_2;
        v7.color_index = col_idx;
        v8.position = voxel_pos + vec3(1.0, 1.0, 0.0);
        v8.normal = normal_2;
        v8.color_index = col_idx;
        v9.position = voxel_pos + vec3(1.0, 0.0, 0.0);
        v9.normal = normal_2;
        v9.color_index = col_idx;

        v10.position = voxel_pos + vec3(1.0, 0.0, 0.0);
        v10.normal = normal_2;
        v10.color_index = col_idx;
        v11.position = voxel_pos + vec3(1.0, 0.0, 1.0);
        v11.normal = normal_2;
        v11.color_index = col_idx;
        v12.position = voxel_pos + vec3(1.0, 1.0, 1.0);
        v12.normal = normal_2;
        v12.color_index = col_idx;
        
        vertices[local_base_idx] = v7;
        vertices[local_base_idx + 1] = v8;
        vertices[local_base_idx + 2] = v9;
        vertices[local_base_idx + 3] = v10;
        vertices[local_base_idx + 4] = v11;
        vertices[local_base_idx + 5] = v12;

        local_base_idx += 6;
    }

    if (((neighbours >> 5) & 1) == 1){
        vec3 normal_3 = vec3(0.0, 0.0, -1.0);
        Vertex v13, v14, v15, v16, v17, v18;
        v13.position = voxel_pos + vec3(0.0, 0.0, 0.0);
        v13.normal = normal_3;
        v13.color_index = col_idx;
        v14.position = voxel_pos + vec3(1.0, 0.0, 0.0);
        v14.normal = normal_3;
        v14.color_index = col_idx;
        v15.position = voxel_pos + vec3(1.0, 1.0, 0.0);
        v15.normal = normal_3;
        v15.color_index = col_idx;

        v16.position = voxel_pos + vec3(1.0, 1.0, 0.0);
        v16.normal = normal_3;
        v16.color_index = col_idx;
        v17.position = voxel_pos + vec3(0.0, 1.0, 0.0);
        v17.normal = normal_3;
        v17.color_index = col_idx;
        v18.position = voxel_pos + vec3(0.0, 0.0, 0.0);
        v18.normal = normal_3;
        v18.color_index = col_idx;

        vertices[local_base_idx] = v13;
        vertices[local_base_idx + 1] = v14;
        vertices[local_base_idx + 2] = v15;
        vertices[local_base_idx + 3] = v16;
        vertices[local_base_idx + 4] = v17;
        vertices[local_base_idx + 5] = v18;

        local_base_idx += 6;
    }

    if (((neighbours >> 4) & 1) == 1){
        vec3 normal_4 = vec3(0.0, 0.0, 1.0);
        Vertex v19, v20, v21, v22, v23, v24;
        v19.position = voxel_pos + vec3(0.0, 0.0, 1.0);
        v19.normal = normal_4;
        v19.color_index = col_idx;
        v20.position = voxel_pos + vec3(1.0, 1.0, 1.0);
        v20.normal = normal_4;
        v20.color_index = col_idx;
        v21.position = voxel_pos + vec3(1.0, 0.0, 1.0);
        v21.normal = normal_4;
        v21.color_index = col_idx;

        v22.position = voxel_pos + vec3(1.0, 1.0, 1.0);
        v22.normal = normal_4;
        v22.color_index = col_idx;
        v23.position = voxel_pos + vec3(0.0, 0.0, 1.0);
        v23.normal = normal_4;
        v23.color_index = col_idx;
        v24.position = voxel_pos + vec3(0.0, 1.0, 1.0);
        v24.normal = normal_4;
        v24.color_index = col_idx;

        vertices[local_base_idx] = v19;
        vertices[local_base_idx + 1] = v20;
        vertices[local_base_idx + 2] = v21;
        vertices[local_base_idx + 3] = v22;
        vertices[local_base_idx + 4] = v23;
        vertices[local_base_idx + 5] = v24;

        local_base_idx += 6;
    }
    
    if (((neighbours >> 3) & 1) == 1){
        vec3 normal_5 = vec3(0.0, -1.0, 0.0);
        Vertex v25, v26, v27, v28, v29, v30;
        v25.position = voxel_pos + vec3(0.0, 0.0, 0.0);
        v25.normal = normal_5;
        v25.color_index = col_idx;
        v26.position = voxel_pos + vec3(1.0, 0.0, 1.0);
        v26.normal = normal_5;
        v26.color_index = col_idx;
        v27.position = voxel_pos + vec3(1.0, 0.0, 0.0);
        v27.normal = normal_5;
        v27.color_index = col_idx;

        v28.position = voxel_pos + vec3(1.0, 0.0, 1.0);
        v28.normal = normal_5;
        v28.color_index = col_idx;
        v29.position = voxel_pos + vec3(0.0, 0.0, 0.0);
        v29.normal = normal_5;
        v29.color_index = col_idx;
        v30.position = voxel_pos + vec3(0.0, 0.0, 1.0);
        v30.normal = normal_5;
        v30.color_index = col_idx;

        vertices[local_base_idx] = v25;
        vertices[local_base_idx + 1] = v26;
        vertices[local_base_idx + 2] = v27;
        vertices[local_base_idx + 3] = v28;
        vertices[local_base_idx + 4] = v29;
        vertices[local_base_idx + 5] = v30;

        local_base_idx += 6;
    }
    
    if (((neighbours >> 2) & 1) == 1){
        vec3 normal_6 = vec3(0.0, 1.0, 0.0);
        Vertex v31, v32, v33, v34, v35, v36;
        v31.position = voxel_pos + vec3(0.0, 1.0, 0.0);
        v31.normal = normal_6;
        v31.color_index = col_idx;
        v32.position = voxel_pos + vec3(1.0, 1.0, 0.0);
        v32.normal = normal_6;
        v32.color_index = col_idx;
        v33.position = voxel_pos + vec3(1.0, 1.0, 1.0);
        v33.normal = normal_6;
        v33.color_index = col_idx;

        v34.position = voxel_pos + vec3(1.0, 1.0, 1.0);
        v34.normal = normal_6;
        v34.color_index = col_idx;
        v35.position = voxel_pos + vec3(0.0, 1.0, 1.0);
        v35.normal = normal_6;
        v35.color_index = col_idx;
        v36.position = voxel_pos + vec3(0.0, 1.0, 0.0);
        v36.normal = normal_6;
        v36.color_index = col_idx;

        vertices[local_base_idx] = v31;
        vertices[local_base_idx + 1] = v32;
        vertices[local_base_idx + 2] = v33;
        vertices[local_base_idx + 3] = v34;
        vertices[local_base_idx + 4] = v35;
        vertices[local_base_idx + 5] = v36;

        local_base_idx += 6;
    }
}